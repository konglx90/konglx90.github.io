{"version":3,"sources":["Resume/interface.ts","Resume/index.tsx","Resume/i18n/en.ts","Resume/i18n/zh.ts","App.tsx","tools.ts","Resume/i18n/index.ts","serviceWorker.ts","index.tsx"],"names":["SectionType","SkillLevel","layoutStyle","display","flexDirection","Row","span","children","style","width","Col","Section","props","borderTop","marginTop","paddingTop","paddingBottom","EasySection","title","escapeHtml","description","Resume","className","personalDetail","name","jobTitle","phone","email","sections","map","section","type","easy","resumeData","App","useState","lang","setLang","useEffect","reg","RegExp","r","window","location","search","substr","match","decodeURI","getValueFromLocationSearch","i18nDict","zh","zhResumeData","en","enResumeData","data","i18n","Boolean","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mIAAYA,EAMAC,E,2FANAD,K,gBAAAA,E,YAAAA,E,eAAAA,M,cAMAC,K,gBAAAA,E,oBAAAA,E,oBAAAA,E,0BAAAA,E,iBAAAA,M,KCKZ,IAAMC,EAAmC,CACvCC,QAAS,OACTC,cAAe,OAGXC,EAAwB,SAAC,GAAD,QAC5BC,YAD4B,MACrB,GADqB,EAE5BC,EAF4B,EAE5BA,SAF4B,OAI5B,yBAAKC,MAAK,eAAMN,EAAN,CAAmBO,MAAM,GAAD,OAAKH,EAAO,GAAK,IAAjB,QAC/BC,IAICG,EAAwB,SAAC,GAAD,QAC5BJ,YAD4B,MACrB,GADqB,EAE5BC,EAF4B,EAE5BA,SAF4B,OAI5B,yBAAKC,MAAK,eACLN,EADK,CAERE,cAAe,SACfK,MAAM,GAAD,OAAKH,EAAO,GAAK,IAAjB,QAEJC,IAICI,EAAoB,SAAAC,GAAK,OAC7B,6BACEJ,MAAO,CACLK,UAAW,iBACXC,UAAW,OACXC,WAAY,OACZC,cAAe,SAGhBJ,EAAML,WAILU,EAA0C,SAAAL,GAAK,OACnD,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAKN,KAAM,GACT,4BAAKM,EAAMM,QAEb,kBAAC,EAAD,CAAKZ,KAAM,IACT,kBAAC,IAAD,CAAea,YAAY,GAAQP,EAAMQ,iBAsBlCC,EAhBuB,SAACT,GACrC,OACE,yBAAKU,UAAU,UACb,gCACE,4BAAKV,EAAMW,eAAeC,KAA1B,IAAiCZ,EAAMW,eAAeE,UACtD,2BAAIb,EAAMW,eAAeG,MAAzB,IAAiCd,EAAMW,eAAeI,QAExD,8BACGf,EAAMgB,SAASC,KAAI,SAAAC,GAAO,OAAIA,EAAQC,OAAS/B,EAAYgC,MAC1D,kBAAC,EAAgBF,SCpEdG,EAA0B,CACrCV,eAAgB,CACdE,SAAU,qBACVD,KAAM,gBACNG,MAAO,qBACPD,MAAO,mBAETE,SAAU,CAAC,CACTG,KAAM/B,EAAYgC,KAClBd,MAAO,QACPE,YAAa,uCACZ,CACDW,KAAM/B,EAAYgC,KAClBd,MAAO,cACPE,YAAY,wrBCdHa,EAA0B,CACrCV,eAAgB,CACdE,SAAU,6CACVD,KAAM,qBACNG,MAAO,qBACPD,MAAO,eAETE,SAAU,CAAC,CACTG,KAAM/B,EAAYgC,KAClBd,MAAO,eACPE,YAAa,uCACZ,CACDW,KAAM/B,EAAYgC,KAClBd,MAAO,eACPE,YAAY,o8BCdhB,IAaec,EAbO,WAAO,IAAD,EAEFC,mBAAiB,MAFf,mBAEnBC,EAFmB,KAEbC,EAFa,KAQ1B,OALAC,qBAAU,WACR,IAAMF,ECJH,SAAoCZ,GAC1C,IAAMe,EAAM,IAAIC,OAAJ,eAAmBhB,EAAnB,kBACNiB,EAAIC,OAAOC,SAASC,OAAOC,OAAO,GAAGC,MAAMP,GACjD,OAAS,MAALE,EAAkBC,OAAOK,UAAUN,EAAE,IAElC,KDDSO,CAA2B,SAAW,KACnDX,EAAQD,KACP,IAGD,kBAAC,EEXU,SAASA,GAEtB,IAAMa,EAAW,CACfC,GAAIC,EACJC,GAAIC,GAGAC,EAAOL,EAAUb,GACvB,OAAKkB,GACIL,EAAQ,GFEHM,CAAKnB,KGFDoB,QACW,cAA7Bd,OAAOC,SAASc,UAEe,UAA7Bf,OAAOC,SAASc,UAEhBf,OAAOC,SAASc,SAASX,MACvB,2DCZNY,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.2b0afeb1.chunk.js","sourcesContent":["export enum SectionType {\n  custom = 'custom',\n  easy = 'easy',\n  skill = 'skill'\n}\n\nexport enum SkillLevel {\n  novice = 'novice',\n  beginner = 'beginner',\n  skillful = 'skillful',\n  experienced = 'experienced',\n  expert = 'expert'\n}\n\nexport interface CustomSectionProps {\n  type: SectionType.custom,\n  title: string,\n  city?: string,\n  startDate: string,\n  endDate: string,\n  description: string, // markdown read\n}\n\nexport interface EasySectionProps {\n  type: SectionType.easy,\n  title: string,\n  description: string, // markdown read\n}\n\nexport interface SkillSectionProps {\n  type: SectionType.skill,\n  skill: string,\n  level?: SkillLevel\n}\n\nexport interface ResumeProps {\n  personalDetail: {\n    jobTitle: string,\n    name: string,\n    email: string,\n    phone: string,\n  },\n  sections: Array<CustomSectionProps | EasySectionProps | SkillSectionProps>\n}\n\nexport interface Layout {\n  span?: number,  // 0-24\n  className?: string,\n  style?: React.CSSProperties\n}\n","import React from 'react';\nimport ReactMarkdown from 'react-markdown';\nimport './style.css';\n\nimport {\n  Layout,\n  EasySectionProps,\n  ResumeProps,\n  SectionType\n} from './interface'\n\nconst layoutStyle: React.CSSProperties = { \n  display: 'flex',\n  flexDirection: 'row',\n}\n\nconst Row: React.FC<Layout> = ({\n  span = 24,\n  children\n}) => (\n  <div style={{...layoutStyle, width: `${span / 24 * 100}%` }}>\n    {children}\n  </div>\n)\n\nconst Col: React.FC<Layout> = ({\n  span = 24,\n  children\n}) => (\n  <div style={{ \n    ...layoutStyle,\n    flexDirection: 'column', \n    width: `${span / 24 * 100}%`,\n  }}>\n    {children}\n  </div>\n)\n\nconst Section: React.FC = props => (\n  <section\n    style={{\n      borderTop: '2px solid #333',\n      marginTop: '10px',\n      paddingTop: '10px',\n      paddingBottom: '20px'\n    }}\n  >\n    {props.children}\n  </section>\n)\n\nconst EasySection: React.FC<EasySectionProps> = props => (\n  <Section>\n    <Row>\n      <Col span={4}>\n        <h4>{props.title}</h4>\n      </Col>\n      <Col span={20}>\n        <ReactMarkdown escapeHtml={false}>{props.description}</ReactMarkdown>\n      </Col>\n    </Row>\n  </Section>\n)\n\nconst Resume: React.FC<ResumeProps> = (props) => {\n  return (\n    <div className=\"resume\">\n      <header>\n        <h3>{props.personalDetail.name} {props.personalDetail.jobTitle}</h3>\n        <p>{props.personalDetail.phone} {props.personalDetail.email}</p>\n      </header>\n      <main>\n        {props.sections.map(section => section.type === SectionType.easy && (\n          <EasySection {...section} />\n        ))}\n      </main>\n    </div>\n  );\n}\n\nexport default Resume;\n","import {\n  ResumeProps,\n  SectionType\n} from '../interface'\n\nexport const resumeData: ResumeProps = {\n  personalDetail: {\n    jobTitle: 'Front-end Software',\n    name: 'kong lingxing',\n    email: 'konglx90@gmail.com',\n    phone: '+86 17600367421'\n  },\n  sections: [{\n    type: SectionType.easy,\n    title: 'LINKS',\n    description: '[github](http://konglx90.github.io)'\n  }, {\n    type: SectionType.easy,\n    title: 'DESCRIPTION',\n    description: `\n- Three years of front-end development experience, one year of back-end internship experience, familiar with the basic process of front-end development.\n- Independently responsible for developing and launching several complete front-end projects, involving B-side, C-side and applet development, and working with others on RN projects.\n- Have more maintenance experience in front-end projects. The technology stack involves React, Vue, Backbone, jQuery, etc.\n- Have studied computer basics carefully, including data structure, algorithm and network knowledge.\n- The technology stacks for everyday work are React, TypeScript, and Rxjs.\n- Have experience with svelte and Flutter.\n    `\n  }]\n}","import {\n  ResumeProps,\n  SectionType\n} from '../interface'\n\nexport const resumeData: ResumeProps = {\n  personalDetail: {\n    jobTitle: '前端开发工程师',\n    name: '孔令星',\n    email: 'konglx90@gmail.com',\n    phone: '17600367421'\n  },\n  sections: [{\n    type: SectionType.easy,\n    title: '链接',\n    description: '[github](http://konglx90.github.io)'\n  }, {\n    type: SectionType.easy,\n    title: '简介',\n    description: `\n- 三年前端开发经验，一年后端实习经验，熟悉前端开发的基本流程。\n- 独立负责开发并上线过数个完整的前端项目，涉及B端、C端和小程序开发，并与他人合作过RN的项目。\n- 有较多的前端项目的维护经验，技术栈涉及React、Vue、Backbone、jQuery等。\n- 认真学习过计算机基础知识，包括数据结构、算法和网络知识。\n- 日常工作的技术栈为React、TypeScript和Rxjs。\n- 有过svelte和Flutter的使用经验\n    `\n  }]\n}","import React, { useState, useEffect } from 'react';\nimport Resume from './Resume/index';\nimport i18n from './Resume/i18n';\nimport { getValueFromLocationSearch } from './tools'\n\nconst App: React.FC = () => {\n\n  const [lang, setLang] = useState<string>('zh');\n  useEffect(() => {\n    const lang = getValueFromLocationSearch('lang') || 'zh';\n    setLang(lang)\n  }, [])\n\n  return (\n    <Resume {...i18n(lang)} />\n  );\n}\n\nexport default App;\n","/**\n* 解析url参数\n* @param {String} name 参数名\n* @return {String} 值\n*/\nexport function getValueFromLocationSearch(name: string) {\n const reg = new RegExp(`(^|&)${name}=([^&]*)(&|$)`);\n const r = window.location.search.substr(1).match(reg);\n if (r != null) return window.decodeURI(r[2]);\n\n return null;\n}\n","import { resumeData as enResumeData } from './en'\nimport { resumeData as zhResumeData } from './zh'\n\nexport default function(lang: string) {\n\n  const i18nDict = {\n    zh: zhResumeData,\n    en: enResumeData\n  }\n\n  const data = i18nDict[(lang as 'zh' | 'en')]\n  if (!data) {\n    return i18nDict['zh']\n  }\n\n  return data\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}